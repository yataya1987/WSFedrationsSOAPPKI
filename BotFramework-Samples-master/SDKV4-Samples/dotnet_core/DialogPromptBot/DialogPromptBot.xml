<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DialogPromptBot</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BotBuilderSamples.DialogPromptBot">
            <summary>
            Represents a bot that processes incoming activities.
            For each user interaction, an instance of this class is created and the OnTurnAsync method
            is called. This is a Transient lifetime service.  Transient lifetime services are created
            each time they're requested. For each Activity received, a new instance of this class is
            created. Objects that are expensive to construct, or have a lifetime beyond the single
            turn, should be carefully managed. For example, the <see cref="T:Microsoft.Bot.Builder.MemoryStorage"/> object and
            associated <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> object are created with a singleton lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.#ctor(Microsoft.BotBuilderSamples.DialogPromptBotAccessors,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BotBuilderSamples.DialogPromptBot"/> class.
            </summary>
            <param name="accessors">A class containing <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> used
            to manage state.</param>
            <param name="loggerFactory">A <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> that is hooked to the Azure
            App Service provider.</param>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>
            Every conversation turn for our Echo Bot will call this method.
            There are no dialogs used, since it's "single turn" processing, meaning a single
            request and response.
            </summary>
            <param name="turnContext">A <see cref="T:Microsoft.Bot.Builder.ITurnContext"/> containing all the data needed
            for processing this conversation turn. </param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can
            be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the work queued to execute.</returns>
            <seealso cref="T:Microsoft.Bot.Builder.BotStateSet"/>
            <seealso cref="T:Microsoft.Bot.Builder.ConversationState"/>
            <seealso cref="T:Microsoft.Bot.Builder.IMiddleware"/>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.PromptForPartySizeAsync(Microsoft.Bot.Builder.Dialogs.WaterfallStepContext,System.Threading.CancellationToken)">
            <summary>First step of the main dialog: prompt for party size.</summary>
            <param name="stepContext">The context for the waterfall step.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains information from this step.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.PromptForLocationAsync(Microsoft.Bot.Builder.Dialogs.WaterfallStepContext,System.Threading.CancellationToken)">
            <summary>Second step of the main dialog: prompt for location.</summary>
            <param name="stepContext">The context for the waterfall step.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains information from this step.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.PromptForReservationDateAsync(Microsoft.Bot.Builder.Dialogs.WaterfallStepContext,System.Threading.CancellationToken)">
            <summary>Third step of the main dialog: prompt for the reservation date.</summary>
            <param name="stepContext">The context for the waterfall step.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains information from this step.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.AcknowledgeReservationAsync(Microsoft.Bot.Builder.Dialogs.WaterfallStepContext,System.Threading.CancellationToken)">
            <summary>Last step of the main dialog: return the collected reservation information.</summary>
            <param name="stepContext">The context for the waterfall step.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains information from this step.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.RangeValidatorAsync(Microsoft.Bot.Builder.Dialogs.PromptValidatorContext{System.Int32},System.Threading.CancellationToken)">
            <summary>Validates whether the party size is appropriate to make a reservation.</summary>
            <param name="promptContext">The validation context.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Reservations can be made for groups of 6 to 20 people.
            If the task is successful, the result indicates whether the input was valid.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBot.DateValidatorAsync(Microsoft.Bot.Builder.Dialogs.PromptValidatorContext{System.Collections.Generic.IList{Microsoft.Bot.Builder.Dialogs.DateTimeResolution}},System.Threading.CancellationToken)">
            <summary>Validates whether the reservation date is appropriate.</summary>
            <param name="promptContext">The validation context.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>Reservations must be made at least an hour in advance.
            If the task is successful, the result indicates whether the input was valid.</remarks>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.DialogPromptBot.Range">
            <summary>Describes an acceptable range of values.</summary>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.DialogPromptBot.Reservation">
            <summary>Holds a user's reservation information.</summary>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.DialogPromptBotAccessors">
            <summary>
            This class is created as a Singleton and passed into the IBot-derived constructor.
             - See <see cref="T:Microsoft.BotBuilderSamples.DialogPromptBot"/> constructor for how that is injected.
             - See the Startup.cs file for more details on creating the Singleton that gets
               injected into the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.#ctor(Microsoft.Bot.Builder.ConversationState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BotBuilderSamples.DialogPromptBotAccessors"/> class.
            Contains the <see cref="P:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.ConversationState"/> and associated <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/>.
            </summary>
            <param name="conversationState">The state object that stores the counter.</param>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.DialogStateAccessor">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> for CounterState.
            </summary>
            <value>
            The accessor stores the turn count for the conversation.
            </value>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.ConversationState">
            <summary>
            Gets the <see cref="P:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.ConversationState"/> object for the conversation.
            </summary>
            <value>The <see cref="P:Microsoft.BotBuilderSamples.DialogPromptBotAccessors.ConversationState"/> object.</value>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.Startup">
            <summary>
            The Startup class configures services and the request pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.Startup.Configuration">
            <summary>
            Gets the configuration that represents a set of key/value application configuration properties.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> that represents a set of key/value application configuration properties.
            </value>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> specifies the contract for a collection of service descriptors.</param>
            <seealso cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/>
        </member>
    </members>
</doc>
