<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StateBot</name>
    </assembly>
    <members>
        <member name="T:Microsoft.BotBuilderSamples.Startup">
            <summary>
            The Startup class configures services and the request pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.Startup.Configuration">
            <summary>
            Gets the configuration that represents a set of key/value application configuration properties.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> that represents a set of key/value application configuration properties.
            </value>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> specifies the contract for a collection of service descriptors.</param>
            <seealso cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/>
            <seealso cref="!:https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/dependency-injection"/>
            <seealso cref="!:https://docs.microsoft.com/en-us/azure/bot-service/bot-service-manage-channels?view=azure-bot-service-4.0"/>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.StateBot">
            <summary>
            Represents a bot that processes incoming activities.
            For each user interaction, an instance of this class is created and the OnTurnAsync method is called.
            This is a Transient lifetime service.  Transient lifetime services are created
            each time they're requested. For each Activity received, a new instance of this
            class is created. Objects that are expensive to construct, or have a lifetime
            beyond the single turn, should be carefully managed.
            For example, the <see cref="T:Microsoft.Bot.Builder.MemoryStorage"/> object and associated
            <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> object are created with a singleton lifetime.
            </summary>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.StateBot.#ctor(Microsoft.BotBuilderSamples.StateBotAccessors,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BotBuilderSamples.StateBot"/> class.
            </summary>
            <param name="accessors">A class containing <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> used to manage state.</param>
            <param name="loggerFactory">A <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> that is hooked to the Azure App Service provider.</param>
            <remarks>Defines a bot for filling a user profile.</remarks>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.StateBot.OnTurnAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)">
            <summary>The turn handler for the bot.</summary>
            <param name="turnContext">A <see cref="T:Microsoft.Bot.Builder.ITurnContext"/> containing all the data needed
            for processing this conversation turn. </param>
            <param name="cancellationToken">(Optional) A <see cref="T:System.Threading.CancellationToken"/> that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.BotBuilderSamples.StateBotAccessors">
            <summary>
            This class is created as a Singleton and passed into the IBot-derived constructor.
             - See <see cref="T:Microsoft.BotBuilderSamples.StateBotAccessors"/> constructor for how that is injected.
             - See the Startup.cs file for more details on creating the Singleton that gets
               injected into the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.BotBuilderSamples.StateBotAccessors.#ctor(Microsoft.Bot.Builder.ConversationState,Microsoft.Bot.Builder.UserState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.BotBuilderSamples.StateBotAccessors"/> class.
            Contains the state management and associated accessor objects.
            </summary>
            <param name="conversationState">The state object that stores the conversation state.</param>
            <param name="userState">The state object that stores the user state.</param>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.StateBotAccessors.UserProfileName">
            <summary>
            Gets the accessor name for the user profile property accessor.
            </summary>
            <value>The accessor name for the user profile property accessor.</value>
            <remarks>Accessors require a unique name.</remarks>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.StateBotAccessors.UserProfileAccessor">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Bot.Builder.IStatePropertyAccessor`1"/> for the user profile property.
            </summary>
            <value>
            The accessor stores the turn count for the conversation.
            </value>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.StateBotAccessors.ConversationState">
            <summary>
            Gets the <see cref="P:Microsoft.BotBuilderSamples.StateBotAccessors.ConversationState"/> object for the conversation.
            </summary>
            <value>The <see cref="P:Microsoft.BotBuilderSamples.StateBotAccessors.ConversationState"/> object.</value>
        </member>
        <member name="P:Microsoft.BotBuilderSamples.StateBotAccessors.UserState">
            <summary>
            Gets the <see cref="P:Microsoft.BotBuilderSamples.StateBotAccessors.UserState"/> object for the conversation.
            </summary>
            <value>The <see cref="P:Microsoft.BotBuilderSamples.StateBotAccessors.UserState"/> object.</value>
        </member>
    </members>
</doc>
