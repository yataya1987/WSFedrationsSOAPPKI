using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Net;
using WSSAT.DataTypes;

namespace WSSAT.BusinessLayer
{
    public class RestDynamicVulnerabilityScanner
    {
        private MainForm mainForm;

        public RestDynamicVulnerabilityScanner(MainForm mainForm)
        {
            this.mainForm = mainForm;
        }

        public RestDynamicVulnerabilityScanner() : base()
        {
        }

        public void ScanVulnerabilities(VulnerabilitiesVulnerability vuln, RESTApi restDesc, 
            WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, 
            bool isDebug, ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            if (vuln.id == 1) // check authentication
            {
                CheckUnAuthenticatedMethod(restDesc, vuln, WSItemVulnerabilities, 
                    reportObject, isDebug, ref respHeader, HttpHelper, customRequestHeader);
            }
            else
            {
                CheckVulnsExceptAuth(restDesc, vuln, WSItemVulnerabilities, 
                    reportObject, isDebug, ref respHeader, HttpHelper, customRequestHeader);
            }
        }

        private void CheckVulnsExceptAuth(RESTApi restDesc, VulnerabilitiesVulnerability vuln, 
            WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, 
            bool isDebug, ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            CheckVulnsForURLParams(restDesc, vuln, WSItemVulnerabilities,
                    reportObject, isDebug, ref respHeader, HttpHelper, customRequestHeader);
            CheckVulnsForPostParams(restDesc, vuln, WSItemVulnerabilities,
                    reportObject, isDebug, ref respHeader, HttpHelper, customRequestHeader);
        }

        private void CheckVulnsForURLParams(RESTApi restDesc, 
            VulnerabilitiesVulnerability vuln, WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, 
            bool isDebug, ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            //CheckVulnsForParams(restDesc.NormalizedURL, restDesc.UrlParameters, vuln, WSItemVulnerabilities,
            //        reportObject, isDebug, ref respHeader);

            if (restDesc.UrlParameters != null && restDesc.UrlParameters.Count > 0)
            {
                string postDataWithDefault = HttpHelper.GetDefaultValuesForParam(restDesc.NormalizedPostData, restDesc.PostParameters, true);

                for (int i = 0; i < restDesc.UrlParameters.Count; i++)
                {
                    if (i == restDesc.UrlParameters[i].Index)
                    {
                        foreach (string payload in vuln.request)
                        {
                            bool vulnFoundForParam = false;

                            string newUrl = restDesc.NormalizedURL.Replace("{" + i + "}", payload.Trim());
                            newUrl = SetParameterDefaultValue(newUrl, restDesc.UrlParameters, restDesc.UrlParameters[i].Index, isDebug, false);

                            HttpWebResponseWrapper response = null;
                            try
                            {
                                reportObject.TotalRequestCount++;

                                response = HttpHelper.GetHttpWebResponse(restDesc, newUrl, postDataWithDefault, true, ref respHeader, customRequestHeader);
                            }
                            catch (WebException wEx)
                            {
                                SetWebException(newUrl, wEx, WSItemVulnerabilities, payload, isDebug);
                            }
                            catch (Exception ex)
                            {
                                throw ex;
                            }

                            if (response != null && response.WebResponse != null)
                            {
                                SearcForVuln(response, WSItemVulnerabilities, vuln, payload,
                                    ref vulnFoundForParam, newUrl, isDebug, restDesc.UrlParameters[i].Index);
                            }
                            if (vulnFoundForParam)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }

        private void CheckVulnsForPostParams(RESTApi restDesc,
            VulnerabilitiesVulnerability vuln, WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject,
            bool isDebug, ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            //CheckVulnsForParams(restDesc.NormalizedPostData, restDesc.PostParameters, vuln, WSItemVulnerabilities,
            //        reportObject, isDebug, ref respHeader);
            if (restDesc.PostParameters != null && restDesc.PostParameters.Count > 0)
            {
                string urlWithDefault = HttpHelper.GetDefaultValuesForParam(restDesc.NormalizedURL, restDesc.UrlParameters, false);

                for (int i = 0; i < restDesc.PostParameters.Count; i++)
                {
                    if (i == restDesc.PostParameters[i].Index)
                    {
                        foreach (string payload in vuln.request)
                        {
                            bool vulnFoundForParam = false;

                            //string newPostData = restDesc.NormalizedPostData.Replace("{" + i + "}", payload.Trim());
                            string newPostData = restDesc.NormalizedPostData.Replace("{" + i + "}", "\"" + payload.Trim() + "\"");
                            newPostData = SetParameterDefaultValue(newPostData, restDesc.PostParameters, restDesc.PostParameters[i].Index, isDebug, true);

                            HttpWebResponseWrapper response = null;
                            try
                            {
                                reportObject.TotalRequestCount++;

                                response = HttpHelper.GetHttpWebResponse(restDesc, urlWithDefault, newPostData, true, ref respHeader, customRequestHeader);
                            }
                            catch (WebException wEx)
                            {
                                SetWebException(newPostData, wEx, WSItemVulnerabilities, payload, isDebug);
                            }
                            catch (Exception ex)
                            {
                                throw ex;
                            }

                            if (response != null && response.WebResponse != null)
                            {
                                SearcForVuln(response, WSItemVulnerabilities, vuln, payload, 
                                    ref vulnFoundForParam, newPostData, isDebug, restDesc.PostParameters[i].Index);
                            }
                            if (vulnFoundForParam)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }

        public void SetWebException(string method, WebException wEx, WSDescriberForReport WSItemVulnerabilities, string payload, bool isDebug)
        {
            if (WSItemVulnerabilities.Vulns.Where(v => v.Vuln.id == 8).Count() <= 0) // add only one web fault vulnerability
            {
                mainForm.Log("   Web Exception: " + wEx.ToString(), FontStyle.Regular, isDebug, false);

                VulnerabilityForReport webExceptionVuln = new VulnerabilityForReport();
                webExceptionVuln.Vuln = MainForm.vulnerabilities.Vulnerability.Where(v => v.id == 8).FirstOrDefault();
                webExceptionVuln.VulnerableMethodName = method;
                webExceptionVuln.VulnerableParamName = "";
                webExceptionVuln.Payload = payload;
                webExceptionVuln.Response = wEx.Message;
                webExceptionVuln.StatusCode = "";

                WSItemVulnerabilities.Vulns.Add(webExceptionVuln);
            }
        }

        private void SearcForVuln(HttpWebResponseWrapper response, WSDescriberForReport WSItemVulnerabilities, 
            VulnerabilitiesVulnerability vuln, string payload, 
            ref bool vulnFoundForParam, string whereStr, bool isDebug, int paramIndex)
        {
            mainForm.Log("   StatusCode: " + response.WebResponse.StatusCode, FontStyle.Regular, isDebug, false);
            mainForm.Log("   Result: " + response.ResponseBody, FontStyle.Regular, isDebug, false);

            if (!string.IsNullOrEmpty(vuln.statusCode))
            {
                if (vuln.statusCode.Equals(response.WebResponse.StatusCode.ToString()))
                {
                    if (vuln.response == null || vuln.response.Count() == 0)
                    {
                        SetVuln(response, WSItemVulnerabilities, vuln, whereStr, payload, paramIndex, "   " + vuln.title + " Vulnerability Found: " + response.ResponseBody + " - Status Code: " + vuln.statusCode);
                        vulnFoundForParam = true;
                    }
                    else
                    {
                        foreach (string text in vuln.response)
                        {
                            if (response.ResponseBody.Trim().Contains(text.Trim()))
                            {
                                SetVuln(response, WSItemVulnerabilities, vuln, whereStr, payload, paramIndex, "   " + vuln.title + " Vulnerability Found: " + response.ResponseBody + " - Response Text Contains: " + text + " - Status Code: " + vuln.statusCode);
                                vulnFoundForParam = true;
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (string text in vuln.response)
                {
                    //if (System.Text.RegularExpressions.Regex.IsMatch(wsInvoker.ResultString.Trim(), text.Trim(), System.Text.RegularExpressions.RegexOptions.IgnoreCase))
                    if (response.ResponseBody.Trim().Contains(text.Trim()))
                    {
                        // Vulnerability Found
                        SetVuln(response, WSItemVulnerabilities, vuln, whereStr, payload, paramIndex, "   " + vuln.title + " Vulnerability Found: " + response.ResponseBody + " - Response Text Contains: " + text);
                        vulnFoundForParam = true;
                        break;
                    }
                }
            }
        }

        private void SetVuln(HttpWebResponseWrapper response, WSDescriberForReport WSItemVulnerabilities, 
            VulnerabilitiesVulnerability vuln, string methodName, string payload, int paramIndex, string logStr)
        {
            mainForm.Log(logStr, FontStyle.Bold, true, false);
            VulnerabilityForReport vulnRep = new VulnerabilityForReport();
            vulnRep.Vuln = vuln;
            vulnRep.VulnerableMethodName = methodName;
            vulnRep.VulnerableParamName = paramIndex.ToString();
            vulnRep.Payload = payload;
            vulnRep.Response = response.ResponseBody;
            vulnRep.StatusCode = response.WebResponse.StatusCode.ToString();

            WSItemVulnerabilities.Vulns.Add(vulnRep);
        }

        private void CheckUnAuthenticatedMethod(RESTApi restDesc, VulnerabilitiesVulnerability vuln,  
            WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, bool isDebug, 
            ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            HttpWebResponseWrapper response = null;
            try
            {
                reportObject.TotalRequestCount++;
                response = HttpHelper.GetHttpWebResponseWithDefaultParams(restDesc, false, ref respHeader, customRequestHeader);
            }
            catch (WebException wEx)
            {
                //if (wEx.Response.s)
                bool authErrorReceived = false;
                try
                {
                    HttpWebResponse wr = (HttpWebResponse)wEx.Response;

                    if (vuln.statusCode.Equals(((int)wr.StatusCode).ToString()))
                    {
                        authErrorReceived = true;
                    }
                }
                catch { }

                if (!authErrorReceived)
                {
                    SetWebException(restDesc.NormalizedURL, wEx, WSItemVulnerabilities, "Web Exception During Authentication Check", isDebug);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            if (response != null && response.WebResponse != null)
            {
                if (!vuln.statusCode.Equals(((int)response.WebResponse.StatusCode).ToString())) // status code != 401, no redirection
                {
                    VulnerabilityForReport authVuln = new VulnerabilityForReport();
                    authVuln.Vuln = MainForm.vulnerabilities.Vulnerability.Where(v => v.id == 1).FirstOrDefault();
                    authVuln.VulnerableMethodName = restDesc.Url.AbsoluteUri;
                    authVuln.VulnerableParamName = "";
                    authVuln.Payload = "";
                    authVuln.Response = response.ResponseBody;
                    authVuln.StatusCode = response.WebResponse.StatusCode.ToString();

                    WSItemVulnerabilities.Vulns.Add(authVuln);

                    mainForm.Log("   Auth Vulnerability Found: " + response.ResponseBody + " - status code is : " + response.WebResponse.StatusCode.ToString(), FontStyle.Bold, true, false);
                }
            }
        }

        public void CheckHTTPOptionsVulns(RESTApi restDesc, VulnerabilitiesVulnerability vuln, 
            WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, bool isDebug, 
            ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            CheckWebServerVulns(restDesc, vuln, WSItemVulnerabilities, reportObject, isDebug, 
                ref respHeader, HttpHelper, customRequestHeader, "HTTP OPTIONS", "OPTIONS");
        }

        public void CheckXSTVulns(RESTApi restDesc, VulnerabilitiesVulnerability vuln,
           WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, bool isDebug,
           ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader)
        {
            CheckWebServerVulns(restDesc, vuln, WSItemVulnerabilities, reportObject, isDebug,
                ref respHeader, HttpHelper, customRequestHeader, "Cross Site Tracing", "TRACE");
        }

        private void CheckWebServerVulns(RESTApi restDesc, VulnerabilitiesVulnerability vuln,
            WSDescriberForReport WSItemVulnerabilities, ReportObject reportObject, bool isDebug,
            ref List<Param> respHeader, RestHTTPHelper HttpHelper, string customRequestHeader, 
            string methodName, string httpMethodName)
        {
            HttpWebResponseWrapper response = null;
            try
            {
                reportObject.TotalRequestCount++;
                response = HttpHelper.GetHttpWebResponseForWebServerVuln(restDesc.Url.Scheme + "://" + restDesc.Url.Host + ":" + restDesc.Url.Port, 
                    restDesc.BasicAuthentication, ref respHeader, customRequestHeader, httpMethodName);
            }
            catch (Exception ex)
            {
                mainForm.Log("   " + methodName + " - Exception: " + ex.ToString(), FontStyle.Regular, true, true);
            }

            if (response != null && response.WebResponse != null)
            {
                if (vuln.statusCode.Equals(((int)response.WebResponse.StatusCode).ToString())) // status code == 200
                {
                    VulnerabilityForReport newVuln = new VulnerabilityForReport();
                    newVuln.Vuln = vuln;
                    newVuln.VulnerableMethodName = restDesc.Url.AbsoluteUri + ":" + restDesc.Url.Port;
                    newVuln.VulnerableParamName = "";
                    newVuln.Payload = "";
                    newVuln.Response = response.ResponseBody;
                    newVuln.StatusCode = response.WebResponse.StatusCode.ToString();

                    WSItemVulnerabilities.Vulns.Add(newVuln);

                    mainForm.Log("   " + methodName + " is enabled: " + response.ResponseBody + " - status code is : " + response.WebResponse.StatusCode.ToString(), FontStyle.Bold, true, false);
                }
            }
        }

        private string SetParameterDefaultValue(string data, List<WSParameter> prms, int paramIndexToTest, bool isDebug, bool isQuoted)
        {
            string result = data;

            for (int i = 0; i < prms.Count; i++)
            {
                if (i != paramIndexToTest)
                {
                    result = result.Replace("{" + i + "}", GetDefaultValueForSingleParam(prms[i].TypeName, i, isDebug, isQuoted));
                }
            }

            return result;
        }

        private string GetDefaultValueForSingleParam(string typeName, int index, bool isDebug, bool isQuoted)
        {
            switch (typeName)
            {
                case "int":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.IntDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.IntDefaultVal;
                case "string":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.StringDefaultVal, FontStyle.Regular, isDebug, false);
                    if (isQuoted)
                    {
                        return "\"" + DefaultValues.StringDefaultVal + "\"";
                    }
                    else
                    {
                        return DefaultValues.StringDefaultVal;
                    }
                case "double":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.DoubleDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.DoubleDefaultVal;
                case "decimal":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.DecimalDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.DecimalDefaultVal;
                case "boolean":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.BooleanDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.BooleanDefaultVal;
                case "bool":
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.BooleanDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.BooleanDefaultVal;
                default:
                    mainForm.Log("   {" + index + "} - " + typeName + ":" + DefaultValues.StringDefaultVal, FontStyle.Regular, isDebug, false);
                    return DefaultValues.StringDefaultVal;
            }
        }
    }
}
