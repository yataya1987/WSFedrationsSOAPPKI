using System;
using System.Drawing;
using System.Xml.Linq;
using WSSAT.DataTypes;
using System.Linq;

namespace WSSAT.BusinessLayer
{
    public class StaticVulnerabilityScanner
    {
        public string ScanIt(StaticVulnerabilitiesStaticVulnerability staticVuln, XDocument xDocument)
        {
            string result = string.Empty;
            if (xDocument != null)
            {
                var elements = xDocument.Root
                        .DescendantsAndSelf()
                        .Elements();

                string[] searchElementsArr = staticVuln.searchElement.Split(',');

                if (staticVuln.attributeValue)
                {
                    for (int i = 0; i < searchElementsArr.Length; i++)
                    {
                        string tmp = searchElementsArr[i];
                        elements = elements.Where(d => (string)d.Attribute(tmp) == staticVuln.searchValue);
                        if (elements != null && elements.Count() > 0)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(staticVuln.searchValue))
                    {
                        for (int i = 0; i < searchElementsArr.Length; i++)
                        {
                            string tmp = searchElementsArr[i];

                            elements = elements.Where(d => d.Name.LocalName.Equals(tmp) && d.Value.Equals(staticVuln.searchValue));
                            if (elements != null && elements.Count() > 0)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < searchElementsArr.Length; i++)
                        {
                            string tmp = searchElementsArr[i];

                            elements = elements.Where(d => d.Name.LocalName.Equals(tmp));
                            if (elements != null && elements.Count() > 0)
                            {
                                break;
                            }
                        }
                    }
                }

                if (elements != null && elements.Count() > 0)
                {
                    if (!string.IsNullOrEmpty(staticVuln.missingTag))
                    {
                        //elements.Descendants()
                        var xx = elements.Descendants();
                        var subElements = xx.Where(d => d.Name.LocalName.Equals(staticVuln.missingTag));

                        if (subElements != null && subElements.Count() > 0) // sub element var, zafiyet yok
                        {
                            elements = null;
                        }
                    }
                }

                if (elements != null && elements.Count() > 0)
                {
                    foreach (var x in elements.Cast<XElement>())
                    {
                        result += x.ToString() + "\r\n";
                    }
                }
            }
            return result;
        }
    }
}
